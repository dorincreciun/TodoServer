name: Deploy to Production

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job pentru testare
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cp env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "MONGODB_URI=mongodb://localhost:27017/todo-list-test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/1" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-key-for-testing-purposes-only-minimum-32-characters" >> .env.test
          echo "JWT_REFRESH_SECRET=test-jwt-refresh-secret-key-for-testing-purposes-only-minimum-32-characters" >> .env.test

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/todo-list-test
          REDIS_URL: redis://localhost:6379/1

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()

  # Job pentru build și push Docker image
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job pentru deployment pe serverul live
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Navighează la directorul proiectului
            cd ${{ secrets.PROJECT_PATH }}

            # Backup pentru configurația actuală
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

            # Pull ultimele modificări
            git pull origin main

            # Actualizează variabilele de mediu pentru producție
            cp env.production .env

            # Oprește serviciile existente
            docker-compose -f docker-compose.prod.yml down

            # Pull ultimele imagini Docker
            docker-compose -f docker-compose.prod.yml pull

            # Pornește serviciile cu noile imagini
            docker-compose -f docker-compose.prod.yml up -d

            # Verifică starea serviciilor
            docker-compose -f docker-compose.prod.yml ps

            # Curăță imagini vechi
            docker image prune -f

            # Verifică health check
            sleep 30
            curl -f http://localhost/api/health || exit 1

            echo "Deployment completed successfully!"

      # Notificări Slack eliminate pentru a evita erorile de configurare
      # Slack notifications removed to avoid configuration errors

  # Job pentru rollback în caz de eroare
  rollback:
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'failure'

    steps:
      - name: Rollback to previous version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}

            # Restore backup-ul
            if [ -f .env.backup.* ]; then
              cp .env.backup.* .env
            fi

            # Restart serviciile
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d

            echo "Rollback completed!"
