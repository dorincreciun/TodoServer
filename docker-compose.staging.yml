version: '3.8'

services:
  # MongoDB pentru staging
  mongodb-staging:
    image: mongo:7.0
    container_name: todo-mongodb-staging
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: staging123
      MONGO_INITDB_DATABASE: todo-list-staging
    ports:
      - "27018:27017"
    volumes:
      - mongodb_staging_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - todo-staging-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis pentru staging
  redis-staging:
    image: redis:7.2-alpine
    container_name: todo-redis-staging
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - todo-staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Backend API pentru staging
  backend-staging:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev-dependencies
    container_name: todo-backend-staging
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=staging
      - PORT=3000
      - MONGODB_URI=mongodb://admin:staging123@mongodb-staging:27017/todo-list-staging?authSource=admin
      - REDIS_URL=redis://redis-staging:6379
      - JWT_SECRET=staging-jwt-secret-key-for-staging-purposes-only-minimum-32-characters
      - JWT_REFRESH_SECRET=staging-jwt-refresh-secret-key-for-staging-purposes-only-minimum-32-characters
      - ALLOWED_ORIGINS=http://localhost:3001,http://localhost:5173,http://localhost:8080
      - RATE_LIMIT_MAX_REQUESTS=1000
      - AUTH_RATE_LIMIT_MAX_REQUESTS=50
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - todo-staging-network
    depends_on:
      mongodb-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express pentru staging (UI pentru MongoDB)
  mongo-express-staging:
    image: mongo-express:1.0.0
    container_name: todo-mongo-express-staging
    restart: unless-stopped
    ports:
      - "8083:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=staging123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:staging123@mongodb-staging:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=staging123
    networks:
      - todo-staging-network
    depends_on:
      mongodb-staging:
        condition: service_healthy

  # Redis Commander pentru staging (UI pentru Redis)
  redis-commander-staging:
    image: rediscommander/redis-commander:latest
    container_name: todo-redis-commander-staging
    restart: unless-stopped
    ports:
      - "8084:8081"
    environment:
      - REDIS_HOSTS=local:redis-staging:6379
    networks:
      - todo-staging-network
    depends_on:
      redis-staging:
        condition: service_healthy

volumes:
  mongodb_staging_data:
    driver: local
  redis_staging_data:
    driver: local

networks:
  todo-staging-network:
    driver: bridge 